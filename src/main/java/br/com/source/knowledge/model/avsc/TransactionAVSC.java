/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package br.com.source.knowledge.model.avsc;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class TransactionAVSC extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 7862184949998847480L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"TransactionAVSC\",\"namespace\":\"br.com.source.knowledge.model.avsc\",\"fields\":[{\"name\":\"mother\",\"type\":{\"type\":\"record\",\"name\":\"PersonAVSC\",\"fields\":[{\"name\":\"name\",\"type\":\"string\"}]}},{\"name\":\"father\",\"type\":\"PersonAVSC\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<TransactionAVSC> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<TransactionAVSC> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<TransactionAVSC> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<TransactionAVSC> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<TransactionAVSC> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this TransactionAVSC to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a TransactionAVSC from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a TransactionAVSC instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static TransactionAVSC fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private br.com.source.knowledge.model.avsc.PersonAVSC mother;
  private br.com.source.knowledge.model.avsc.PersonAVSC father;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public TransactionAVSC() {}

  /**
   * All-args constructor.
   * @param mother The new value for mother
   * @param father The new value for father
   */
  public TransactionAVSC(br.com.source.knowledge.model.avsc.PersonAVSC mother, br.com.source.knowledge.model.avsc.PersonAVSC father) {
    this.mother = mother;
    this.father = father;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return mother;
    case 1: return father;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: mother = (br.com.source.knowledge.model.avsc.PersonAVSC)value$; break;
    case 1: father = (br.com.source.knowledge.model.avsc.PersonAVSC)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'mother' field.
   * @return The value of the 'mother' field.
   */
  public br.com.source.knowledge.model.avsc.PersonAVSC getMother() {
    return mother;
  }


  /**
   * Sets the value of the 'mother' field.
   * @param value the value to set.
   */
  public void setMother(br.com.source.knowledge.model.avsc.PersonAVSC value) {
    this.mother = value;
  }

  /**
   * Gets the value of the 'father' field.
   * @return The value of the 'father' field.
   */
  public br.com.source.knowledge.model.avsc.PersonAVSC getFather() {
    return father;
  }


  /**
   * Sets the value of the 'father' field.
   * @param value the value to set.
   */
  public void setFather(br.com.source.knowledge.model.avsc.PersonAVSC value) {
    this.father = value;
  }

  /**
   * Creates a new TransactionAVSC RecordBuilder.
   * @return A new TransactionAVSC RecordBuilder
   */
  public static br.com.source.knowledge.model.avsc.TransactionAVSC.Builder newBuilder() {
    return new br.com.source.knowledge.model.avsc.TransactionAVSC.Builder();
  }

  /**
   * Creates a new TransactionAVSC RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new TransactionAVSC RecordBuilder
   */
  public static br.com.source.knowledge.model.avsc.TransactionAVSC.Builder newBuilder(br.com.source.knowledge.model.avsc.TransactionAVSC.Builder other) {
    if (other == null) {
      return new br.com.source.knowledge.model.avsc.TransactionAVSC.Builder();
    } else {
      return new br.com.source.knowledge.model.avsc.TransactionAVSC.Builder(other);
    }
  }

  /**
   * Creates a new TransactionAVSC RecordBuilder by copying an existing TransactionAVSC instance.
   * @param other The existing instance to copy.
   * @return A new TransactionAVSC RecordBuilder
   */
  public static br.com.source.knowledge.model.avsc.TransactionAVSC.Builder newBuilder(br.com.source.knowledge.model.avsc.TransactionAVSC other) {
    if (other == null) {
      return new br.com.source.knowledge.model.avsc.TransactionAVSC.Builder();
    } else {
      return new br.com.source.knowledge.model.avsc.TransactionAVSC.Builder(other);
    }
  }

  /**
   * RecordBuilder for TransactionAVSC instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<TransactionAVSC>
    implements org.apache.avro.data.RecordBuilder<TransactionAVSC> {

    private br.com.source.knowledge.model.avsc.PersonAVSC mother;
    private br.com.source.knowledge.model.avsc.PersonAVSC.Builder motherBuilder;
    private br.com.source.knowledge.model.avsc.PersonAVSC father;
    private br.com.source.knowledge.model.avsc.PersonAVSC.Builder fatherBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(br.com.source.knowledge.model.avsc.TransactionAVSC.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.mother)) {
        this.mother = data().deepCopy(fields()[0].schema(), other.mother);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (other.hasMotherBuilder()) {
        this.motherBuilder = br.com.source.knowledge.model.avsc.PersonAVSC.newBuilder(other.getMotherBuilder());
      }
      if (isValidValue(fields()[1], other.father)) {
        this.father = data().deepCopy(fields()[1].schema(), other.father);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (other.hasFatherBuilder()) {
        this.fatherBuilder = br.com.source.knowledge.model.avsc.PersonAVSC.newBuilder(other.getFatherBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing TransactionAVSC instance
     * @param other The existing instance to copy.
     */
    private Builder(br.com.source.knowledge.model.avsc.TransactionAVSC other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.mother)) {
        this.mother = data().deepCopy(fields()[0].schema(), other.mother);
        fieldSetFlags()[0] = true;
      }
      this.motherBuilder = null;
      if (isValidValue(fields()[1], other.father)) {
        this.father = data().deepCopy(fields()[1].schema(), other.father);
        fieldSetFlags()[1] = true;
      }
      this.fatherBuilder = null;
    }

    /**
      * Gets the value of the 'mother' field.
      * @return The value.
      */
    public br.com.source.knowledge.model.avsc.PersonAVSC getMother() {
      return mother;
    }


    /**
      * Sets the value of the 'mother' field.
      * @param value The value of 'mother'.
      * @return This builder.
      */
    public br.com.source.knowledge.model.avsc.TransactionAVSC.Builder setMother(br.com.source.knowledge.model.avsc.PersonAVSC value) {
      validate(fields()[0], value);
      this.motherBuilder = null;
      this.mother = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'mother' field has been set.
      * @return True if the 'mother' field has been set, false otherwise.
      */
    public boolean hasMother() {
      return fieldSetFlags()[0];
    }

    /**
     * Gets the Builder instance for the 'mother' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public br.com.source.knowledge.model.avsc.PersonAVSC.Builder getMotherBuilder() {
      if (motherBuilder == null) {
        if (hasMother()) {
          setMotherBuilder(br.com.source.knowledge.model.avsc.PersonAVSC.newBuilder(mother));
        } else {
          setMotherBuilder(br.com.source.knowledge.model.avsc.PersonAVSC.newBuilder());
        }
      }
      return motherBuilder;
    }

    /**
     * Sets the Builder instance for the 'mother' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public br.com.source.knowledge.model.avsc.TransactionAVSC.Builder setMotherBuilder(br.com.source.knowledge.model.avsc.PersonAVSC.Builder value) {
      clearMother();
      motherBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'mother' field has an active Builder instance
     * @return True if the 'mother' field has an active Builder instance
     */
    public boolean hasMotherBuilder() {
      return motherBuilder != null;
    }

    /**
      * Clears the value of the 'mother' field.
      * @return This builder.
      */
    public br.com.source.knowledge.model.avsc.TransactionAVSC.Builder clearMother() {
      mother = null;
      motherBuilder = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'father' field.
      * @return The value.
      */
    public br.com.source.knowledge.model.avsc.PersonAVSC getFather() {
      return father;
    }


    /**
      * Sets the value of the 'father' field.
      * @param value The value of 'father'.
      * @return This builder.
      */
    public br.com.source.knowledge.model.avsc.TransactionAVSC.Builder setFather(br.com.source.knowledge.model.avsc.PersonAVSC value) {
      validate(fields()[1], value);
      this.fatherBuilder = null;
      this.father = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'father' field has been set.
      * @return True if the 'father' field has been set, false otherwise.
      */
    public boolean hasFather() {
      return fieldSetFlags()[1];
    }

    /**
     * Gets the Builder instance for the 'father' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public br.com.source.knowledge.model.avsc.PersonAVSC.Builder getFatherBuilder() {
      if (fatherBuilder == null) {
        if (hasFather()) {
          setFatherBuilder(br.com.source.knowledge.model.avsc.PersonAVSC.newBuilder(father));
        } else {
          setFatherBuilder(br.com.source.knowledge.model.avsc.PersonAVSC.newBuilder());
        }
      }
      return fatherBuilder;
    }

    /**
     * Sets the Builder instance for the 'father' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public br.com.source.knowledge.model.avsc.TransactionAVSC.Builder setFatherBuilder(br.com.source.knowledge.model.avsc.PersonAVSC.Builder value) {
      clearFather();
      fatherBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'father' field has an active Builder instance
     * @return True if the 'father' field has an active Builder instance
     */
    public boolean hasFatherBuilder() {
      return fatherBuilder != null;
    }

    /**
      * Clears the value of the 'father' field.
      * @return This builder.
      */
    public br.com.source.knowledge.model.avsc.TransactionAVSC.Builder clearFather() {
      father = null;
      fatherBuilder = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public TransactionAVSC build() {
      try {
        TransactionAVSC record = new TransactionAVSC();
        if (motherBuilder != null) {
          try {
            record.mother = this.motherBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("mother"));
            throw e;
          }
        } else {
          record.mother = fieldSetFlags()[0] ? this.mother : (br.com.source.knowledge.model.avsc.PersonAVSC) defaultValue(fields()[0]);
        }
        if (fatherBuilder != null) {
          try {
            record.father = this.fatherBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("father"));
            throw e;
          }
        } else {
          record.father = fieldSetFlags()[1] ? this.father : (br.com.source.knowledge.model.avsc.PersonAVSC) defaultValue(fields()[1]);
        }
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<TransactionAVSC>
    WRITER$ = (org.apache.avro.io.DatumWriter<TransactionAVSC>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<TransactionAVSC>
    READER$ = (org.apache.avro.io.DatumReader<TransactionAVSC>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    this.mother.customEncode(out);

    this.father.customEncode(out);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (this.mother == null) {
        this.mother = new br.com.source.knowledge.model.avsc.PersonAVSC();
      }
      this.mother.customDecode(in);

      if (this.father == null) {
        this.father = new br.com.source.knowledge.model.avsc.PersonAVSC();
      }
      this.father.customDecode(in);

    } else {
      for (int i = 0; i < 2; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (this.mother == null) {
            this.mother = new br.com.source.knowledge.model.avsc.PersonAVSC();
          }
          this.mother.customDecode(in);
          break;

        case 1:
          if (this.father == null) {
            this.father = new br.com.source.knowledge.model.avsc.PersonAVSC();
          }
          this.father.customDecode(in);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










